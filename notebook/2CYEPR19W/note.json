{
  "paragraphs": [
    {
      "text": "%sql\n\nDROP TABLE IF EXISTS students",
      "user": "anonymous",
      "dateUpdated": "Oct 18, 2017 7:37:11 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql",
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": ""
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1508355349341_1791207668",
      "id": "20171018-193549_2146325019",
      "dateCreated": "Oct 18, 2017 7:35:49 PM",
      "dateStarted": "Oct 18, 2017 7:37:11 PM",
      "dateFinished": "Oct 18, 2017 7:37:11 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%file\n\nrm /tmp/students",
      "user": "anonymous",
      "dateUpdated": "Oct 18, 2017 7:42:16 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Unknown command"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1508355598323_1117713203",
      "id": "20171018-193958_1246147270",
      "dateCreated": "Oct 18, 2017 7:39:58 PM",
      "dateStarted": "Oct 18, 2017 7:42:16 PM",
      "dateFinished": "Oct 18, 2017 7:42:16 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "case class Mark(value: String)\n\nobject Marks {\n  val A \u003d Mark(\"A\")\n  val B \u003d Mark(\"B\")\n  val C \u003d Mark(\"C\")\n}\n\ncase class Course(name: String)\n\ncase class Grade(course: Course, mark: Mark)\n\ncase class Student(name: String, yearOfBirth: Int, yearOfEnrolment: Int, mark: Int, grades: List[Grade])\n\nval students \u003d List(\nStudent(\"Jane\", 1989, 2016, 91, List(Grade(Course(\"Big Data\"), Marks.A))),\nStudent(\"Joe\", 1992, 2016, 85, List(Grade(Course(\"Big Data\"), Marks.B))),\nStudent(\"Jim\", 1994, 2016, 84, List(Grade(Course(\"Big Data\"), Marks.B))),\nStudent(\"James\", 1991, 2016, 58, List(Grade(Course(\"Big Data\"), Marks.C))),\nStudent(\"John\", 1989, 2016, 92, List(Grade(Course(\"Big Data\"), Marks.A))),\nStudent(\"Jane\", 1989, 2016, 92, List(Grade(Course(\"Big Data\"), Marks.A))),\nStudent(\"Joe\", 1992, 2016, 85, List(Grade(Course(\"Big Data\"), Marks.B))),\nStudent(\"Jim\", 1994, 2016, 85, List(Grade(Course(\"Big Data\"), Marks.B))),\nStudent(\"James\", 1991, 2016, 58, List(Grade(Course(\"Big Data\"), Marks.C))),\nStudent(\"John\", 1989, 2016, 92, List(Grade(Course(\"Big Data\"), Marks.A)))\n)\n\n\n// spark context\nval rdd \u003d sc.parallelize(students)\nval df \u003d rdd.toDF\n\n// df.show\n\nval ds \u003d spark.createDataset(rdd)\n\n// val ds: Dataset[Student] \u003d df.as[Student]\n\n\nds.map(s \u003d\u003e s.mark)\n\ndf.write.option(\"path\", \"/tmp/students\").saveAsTable(\"students\")\n",
      "user": "anonymous",
      "dateUpdated": "Oct 18, 2017 7:39:56 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "defined class Mark\ndefined object Marks\ndefined class Course\ndefined class Grade\ndefined class Student\nstudents: List[Student] \u003d List(Student(Jane,1989,2016,91,List(Grade(Course(Big Data),Mark(A)))), Student(Joe,1992,2016,85,List(Grade(Course(Big Data),Mark(B)))), Student(Jim,1994,2016,84,List(Grade(Course(Big Data),Mark(B)))), Student(James,1991,2016,58,List(Grade(Course(Big Data),Mark(C)))), Student(John,1989,2016,92,List(Grade(Course(Big Data),Mark(A)))), Student(Jane,1989,2016,92,List(Grade(Course(Big Data),Mark(A)))), Student(Joe,1992,2016,85,List(Grade(Course(Big Data),Mark(B)))), Student(Jim,1994,2016,85,List(Grade(Course(Big Data),Mark(B)))), Student(James,1991,2016,58,List(Grade(Course(Big Data),Mark(C)))), Student(John,1989,2016,92,List(Grade(Course(Big Data),Mark(A)))))\nrdd: org.apache.spark.rdd.RDD[Student] \u003d ParallelCollectionRDD[83] at parallelize at \u003cconsole\u003e:42\ndf: org.apache.spark.sql.DataFrame \u003d [name: string, yearOfBirth: int ... 3 more fields]\nds: org.apache.spark.sql.Dataset[Student] \u003d [name: string, yearOfBirth: int ... 3 more fields]\nres641: org.apache.spark.sql.Dataset[Int] \u003d [value: int]\n\u003cconsole\u003e:27: error: not found: value dbfs\n       dbfs.rm(\"/tmp/students\")\n       ^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1508303249308_1533965229",
      "id": "20171018-050729_730711942",
      "dateCreated": "Oct 18, 2017 5:07:29 AM",
      "dateStarted": "Oct 18, 2017 7:39:02 PM",
      "dateFinished": "Oct 18, 2017 7:39:04 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\n\nselect * from students",
      "user": "anonymous",
      "dateUpdated": "Oct 18, 2017 7:37:00 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "sql"
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Table or view not found: students; line 1 pos 14\nset zeppelin.spark.sql.stacktrace \u003d true to see full stacktrace"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1508303341171_-1287059679",
      "id": "20171018-050901_878127",
      "dateCreated": "Oct 18, 2017 5:09:01 AM",
      "dateStarted": "Oct 18, 2017 7:37:01 PM",
      "dateFinished": "Oct 18, 2017 7:37:02 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\n\n-- calculate the mean of the marks\n-- calculate the mode (the most common mark)\n-- calculate the range of marks (clue: the maximum minus the minimum)\n-- calculate the upper and lower quartile marks (namely the mark at 25% and 75% of the range)\n\n",
      "user": "anonymous",
      "dateUpdated": "Oct 18, 2017 7:37:00 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sql"
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nno viable alternative at input \u0027\u003cEOF\u003e\u0027(line 4, pos 93)\n\n\u003d\u003d SQL \u003d\u003d\n-- calculate the mean of the marks\n-- calculate the mode (the most common mark)\n-- calculate the range of marks (clue: the maximum minus the minimum)\n-- calculate the upper and lower quartile marks (namely the mark at 25% and 75% of the range)\n---------------------------------------------------------------------------------------------^^^\n\nset zeppelin.spark.sql.stacktrace \u003d true to see full stacktrace"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1508354955781_460226594",
      "id": "20171018-192915_2097875106",
      "dateCreated": "Oct 18, 2017 7:29:15 PM",
      "dateStarted": "Oct 18, 2017 7:37:02 PM",
      "dateFinished": "Oct 18, 2017 7:37:02 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\n",
      "user": "anonymous",
      "dateUpdated": "Oct 18, 2017 7:37:00 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sql"
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1508355382285_1791638390",
      "id": "20171018-193622_1224742825",
      "dateCreated": "Oct 18, 2017 7:36:22 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "AUT Notebook",
  "id": "2CYEPR19W",
  "angularObjects": {
    "2CV5UYBZZ:shared_process": [],
    "2CXDFJNYA:shared_process": [],
    "2CYMYC8QZ:shared_process": [],
    "2CUYACR1T:shared_process": [],
    "2CVSJCD2G:shared_process": [],
    "2CX6587EZ:shared_process": [],
    "2CX8NZFS2:shared_process": [],
    "2CVSJX2N1:shared_process": [],
    "2CWG41P6P:shared_process": [],
    "2CV94R7QH:shared_process": [],
    "2CVZJST5V:shared_process": [],
    "2CWJFWRBQ:shared_process": [],
    "2CW2S1881:shared_process": [],
    "2CUYYPG6D:shared_process": [],
    "2CW9ZZDBD:shared_process": [],
    "2CY9CQCF9:shared_process": [],
    "2CVT4NM8K:shared_process": [],
    "2CVXVMFT7:shared_process": [],
    "2CWDNYYJ8:shared_process": []
  },
  "config": {},
  "info": {}
}